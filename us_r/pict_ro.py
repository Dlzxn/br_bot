from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram import Bot, Dispatcher, F
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart, StateFilter, CommandObject
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message, PhotoSize)
from dotenv import load_dotenv
import os
import sqlite3
from aiogram.types import FSInputFile
from aiogram.utils.deep_linking import create_start_link, decode_payload
from aiogram import types
import base64
import logging.config
import logging
from random import randint
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage



from func.defs import from_bd, ref_prov, db_table_val, pict, pict_prov, pict_us, new_us_kl
from log_cfg.log_def import start_log, user_new
from keyboard.keyb import kb_menu, like_menu, num_key, raska, num_buy
from us_r.cla import FSMF
storage = MemoryStorage()
router = Router()

user_dict: dict[int, dict[str]] = {}

#–ë–õ–û–ö –†–ê–ó–î–ï–õ–ê –†–ò–°–û–í–ê–ù–ù–´–ô –§–õ–ê–ì-----------------------------------------------------------------------------
@router.message(F.text=="–†–∞—Å–∫—Ä–∞—Å–∫–∞")
async def rask(message:Message):
    s1, s2, s3, s4=pict()
    await message.answer(text=f'–†–∞—Å–∫—Ä–∞—Å—å —Ñ–ª–∞–≥ –ë–µ–ª–æ—Ä—É—Å–∏üáßüáæ\n'
                         f'{s1}\n'
                         f'{s2}\n'
                         f'{s3}\n'
                         f'{s4}\n',
                         reply_markup=num_key)

#–≤—ã–±–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É
@router.message(F.text.in_([str(i) for i in range(1, 21)]))
async def chislo(message: Message):
    if pict_prov(message.text)==True:
        await message.answer_photo(photo=FSInputFile('main_img/user.jpg'),
                                   caption=f'–î–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!\n'
                                   f'–í–ª–∞–¥–µ–ª–µ—Ü: {pict_us(message.text)}\n'
                                   f'–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è!\n'
                                   f'–ï—Å—Ç—å –µ—â–µ –º–Ω–æ–≥–æ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫!',
                                   reply_markup=raska
                                   )
    else:
        await message.answer_photo(photo=FSInputFile('main_img/us_tr.jpg'),
                                   caption=f'–î–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –µ—â–µ –Ω–µ –∑–∞–Ω—è—Ç–∞!\n'
                                   f'–°–∫–æ—Ä–µ–µ –∑–∞–Ω–∏–º–∞–π!',
                                   reply_markup=num_buy
                                   )
        global kle
        kle=message.text

#–∑–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ
@router.message(F.text=="–ó–∞–∫—Ä–∞—Å–∏—Ç—å")
async def zacr_kl(message: Message):
    new_us_kl(kle, message.from_user.id, message.from_user.first_name, message.from_user.username)
    await message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –∑–∞–∫—Ä–∞—Å–∏–ª–∏ –∫–ª–µ—Ç–∫—É {kle}!\n'
                         f'–¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å –∫–ª–µ—Ç–∫–∏:')
    await message.answer_photo(photo=FSInputFile('main_img/user.jpg'),
                                   caption=f'–î–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!\n'
                                   f'–°—Ç–∞—Ç—É—Å: –∑–∞–∫—Ä–∞—à–µ–Ω–∞\n'
                                   f'–í–ª–∞–¥–µ–ª–µ—Ü: {pict_us(kle)}\n',
                                   reply_markup=raska
                                   )
#–∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–ª–æ–∫ –æ–∫–æ–Ω—á–µ–Ω----------------------------------------------------------------------------