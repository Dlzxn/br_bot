import aiogram
from aiogram.types import ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup



class ses():
    us1: int=None
    n_us1: str=None
    us2: int=None
    n_us2: str=None
    sost: bool=False
    time_start: int
    s1_bal: int=0
    s2_bal: int=0
    len_b: int=None
    slov: str=None
    slov_sh: str=None


base_game=[]

def open_sour(sp):
    kol_ses=len(sp)
    but=[[KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É")], [KeyboardButton(text="–ò–≥—Ä–∞ "+str(i)) for i in range(1, kol_ses+1)]]
    num_key=ReplyKeyboardMarkup(keyboard=but, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –∏–≥—Ä—ã")
    # but=['{i}' for i in range(1, kol_ses+1)]
    return num_key
def open_panel(sp):
    s=f'–í—Å–µ –∏–≥—Ä—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n'
    for i in range(0, len(sp)):
        if sp[i].sost==False:
            stat='–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
        else:
            stat='–í –∏–≥—Ä–µ'
        s2=(f'üéÆ–ò–≥—Ä–∞ {i+1}\n'
        f'üë§–ò–≥—Ä–æ–∫ 1: {sp[i].n_us1}\n'
        f'üë•–ò–≥—Ä–æ–∫ 2: {sp[i].n_us2}\n'
        f'--–°–æ—Å—Ç–æ—è–Ω–∏–µ: {stat}\n\n')
        s=s+s2
    return s

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–≥—Ä—ã —É —é–∑–µ—Ä–∞
def prov_igr(sp ,id):
    for i in range(len(sp)):
        if sp[i].us1==id or sp[i].us2==id:
            return True
    return False

#–≤—ã–≤–æ–¥ –∏–≥—Ä—ã —é–∑–µ—Ä–∞
def my_game(sp, id):
    s=f'–í–∞—à–∞ –∏–≥—Ä–∞:\n\n'
    for i in range(0, len(sp)):
        if sp[i].sost==False:
            stat='–ù–µ–∞–∫—Ç–∏–≤–Ω–∞-\n–û–∂–∏–¥–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞\n–ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–¥–∏–Ω!'
        else:
            stat='–í –∏–≥—Ä–µ'
        if sp[i].us1==id:
            s2=(f'üéÆ–ò–≥—Ä–∞ {i+1}\n'
            f'üë§–ò–≥—Ä–æ–∫ 1: {sp[i].n_us1}\n'
            f'üë•–ò–≥—Ä–æ–∫ 2: {sp[i].n_us2}\n'
            f'--–°–æ—Å—Ç–æ—è–Ω–∏–µ: {stat}\n\n')
            s=s+s2
            break
    return s

#
def one_game(sp, id):
    s=0
    for i in range(0, len(sp)):
        if sp[i].us1==id:
            s==1
    if s==0:
        return True
    else:
        return False

def clava_del():
    bust=[[KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É")]]
    nur_key=ReplyKeyboardMarkup(keyboard=bust, resize_keyboard=True, input_field_placeholder="–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞")
    return nur_key

def clava_st_game():
    bust=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")]]
    nur_key=ReplyKeyboardMarkup(keyboard=bust, resize_keyboard=True, input_field_placeholder="–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞")
    return nur_key
#–≤—ã–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∏–≥—Ä—ã —é–∑–µ—Ä–∞
def num_u(sp ,id):
    for i in range(len(sp)):
        if sp[i].us1==id or sp[i].us2==id:
            return i
    return 52

#–æ—Ç–≥–∞–¥–∞–ª –±—É–∫–≤—É
def bucv_otg(bu, st, std):
    sp=[std[i] for i in range(len(std))]
    s=''
    for i in range(len(st)):
        if st[i]==bu.lower():
            sp[i]=bu.lower()
        s+=sp[i]
    return s


#—á–∞—Ç –∏–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
def prot(sp, cd, id):
    if sp[cd].us1==id:
        return sp[cd].us2
    elif sp[cd].us2==id:
        return sp[cd].us1


#–≤—ã–¥–∞—á–∞ –ª–æ–∫–∞–ª—å–Ω–æ –±–∞–ª–ª–æ–≤
def bal(sp, nu, col, id):
    if sp[nu].us1==id:
        return 1
    else:
        return 2